{"ast":null,"code":"import _classCallCheck from \"/Users/arnab/Desktop/my-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/arnab/Desktop/my-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/arnab/Desktop/my-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/arnab/Desktop/my-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/arnab/Desktop/my-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/arnab/Desktop/my-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport images from \"./images.json\";\nimport ImageCards from \"./ImageCards\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      images: images\n    };\n\n    _this.images = function shuffle(images) {\n      for (var i = images.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var _ref = [images[j], images[i]];\n        images[i] = _ref[0];\n        images[j] = _ref[1];\n      }\n\n      return images;\n    };\n\n    _this.arrangeImageRandom = function (id) {\n      //1. if image is already clicked\n      //Change Alert //current score  = 0\n      //if current score >high score then highscore is current score\n      //2.  if image clicked is false\n      // change this image clicked to true -  TO BE DONE\n      //re arrange the images/ sort the images into a random \n      // let images = images => {\n      //   let i = images.length - 1;\n      //   for (; i > 0; i--) {\n      //     const j = Math.floor(Math.random() * (i + 1));\n      //     const temp = images[i];\n      //     images[i] = images[j];\n      //     images[j] = temp;\n      //   }\n      //   return images;\n      // }\n      // let images = this.state.images.filter(images => images.clicked !== true);\n      _this.setState({\n        images: images\n      });\n\n      alert(\"Button was clicked for this little buddy!\"); // console.log(images);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Clicky Game!\"), React.createElement(\"div\", {\n        className: \"col-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \" Click on an Image to start playing!\")), React.createElement(\"div\", {\n        className: \"col-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \" \", \"Your Score: \", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, 2 + 1, \" \"), \" Top Score:\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, 5 + 11, \" \")))), React.createElement(\"div\", {\n        className: \"jumbotron jumbotron-fluid text-center newBackground\",\n        styleName: \"back\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \" Memory Game\"), \" \", React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Click on an image to earn points, but don't click on any more than once!\")), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, this.state.images.map(function (image) {\n        return React.createElement(ImageCards, {\n          arrangeImageRandom: _this2.arrangeImageRandom,\n          id: image.id,\n          key: image.id,\n          image: image.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/arnab/Desktop/my-game/src/App.js"],"names":["React","Component","images","ImageCards","App","state","shuffle","i","length","j","Math","floor","random","arrangeImageRandom","id","setState","alert","map","image"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNH,MAAAA,MAAM,EAANA;AADM,K;;UAIRA,M,GAAS,SAASI,OAAT,CAAiBJ,MAAjB,EAAyB;AAChC,WAAK,IAAIK,CAAC,GAAGL,MAAM,CAACM,MAAP,GAAgB,CAA7B,EAAgCD,CAAC,GAAG,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;AACxC,YAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAV;AADwC,mBAEf,CAACL,MAAM,CAACO,CAAD,CAAP,EAAYP,MAAM,CAACK,CAAD,CAAlB,CAFe;AAEvCL,QAAAA,MAAM,CAACK,CAAD,CAFiC;AAE5BL,QAAAA,MAAM,CAACO,CAAD,CAFsB;AAG3C;;AACD,aAAOP,MAAP;AACH,K;;UAGCW,kB,GAAqB,UAAAC,EAAE,EAAI;AACzB;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,YAAKC,QAAL,CAAc;AAAEb,QAAAA,MAAM,EAANA;AAAF,OAAd;;AACAc,MAAAA,KAAK,CAAC,2CAAD,CAAL,CAtByB,CAuBzB;AACD,K;;;;;;;6BACQ;AAAA;;AACP,aACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADF,CAFF,EAKE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,GADH,kBAEc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,IAAI,CAAX,MAFd,iBAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,IAAI,EAAX,MAHF,CADF,CALF,CADF,EAcE;AACE,QAAA,SAAS,EAAC,qDADZ;AAEE,QAAA,SAAS,EAAC,MAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJF,EAIwB,GAJxB,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFALF,CAdF,EAyBE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKX,KAAL,CAAWH,MAAX,CAAkBe,GAAlB,CAAsB,UAAAC,KAAK;AAAA,eAC1B,oBAAC,UAAD;AACE,UAAA,kBAAkB,EAAE,MAAI,CAACL,kBAD3B;AAEE,UAAA,EAAE,EAAEK,KAAK,CAACJ,EAFZ;AAGE,UAAA,GAAG,EAAEI,KAAK,CAACJ,EAHb;AAIE,UAAA,KAAK,EAAEI,KAAK,CAACA,KAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD0B;AAAA,OAA3B,CADH,CAzBF,CADF;AAsCD;;;;EA9EejB,S;;AAiFlB,eAAeG,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport images from \"./images.json\";\nimport ImageCards from \"./ImageCards\";\n\nclass App extends Component {\n  state = {\n    images\n  };\n\n  images = function shuffle(images) {\n    for (let i = images.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [images[i], images[j]] = [images[j], images[i]];\n    }\n    return images;\n}\n  \n\n  arrangeImageRandom = id => {\n    //1. if image is already clicked\n    //Change Alert //current score  = 0\n    //if current score >high score then highscore is current score\n\n    //2.  if image clicked is false\n    // change this image clicked to true -  TO BE DONE\n    //re arrange the images/ sort the images into a random \n\n    // let images = images => {\n    //   let i = images.length - 1;\n    //   for (; i > 0; i--) {\n    //     const j = Math.floor(Math.random() * (i + 1));\n    //     const temp = images[i];\n    //     images[i] = images[j];\n    //     images[j] = temp;\n    //   }\n    //   return images;\n    // }\n \n    // let images = this.state.images.filter(images => images.clicked !== true);\n    this.setState({ images });\n    alert(\"Button was clicked for this little buddy!\");\n    // console.log(images);\n  };\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-sm\">Clicky Game!</div>\n          <div className=\"col-sm\">\n            <p> Click on an Image to start playing!</p>\n          </div>\n          <div className=\"col-sm\">\n            <p>\n              {\" \"}\n              Your Score: <span>{2 + 1} </span> Top Score:\n              <span>{5 + 11} </span>\n            </p>\n          </div>\n        </div>\n        <div\n          className=\"jumbotron jumbotron-fluid text-center newBackground\"\n          styleName=\"back\"\n        >\n          <h1> Memory Game</h1>{\" \"}\n          <p>\n            Click on an image to earn points, but don't click on any more than\n            once!\n          </p>\n        </div>\n        {/* <ImageCards id={images[1].id} image={images[1].image} arrangeImageRandom={this.arrangeImageRandom} /> */}\n        <div className=\"row\">\n          {this.state.images.map(image => (\n            <ImageCards\n              arrangeImageRandom={this.arrangeImageRandom}\n              id={image.id}\n              key={image.id}\n              image={image.image}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}